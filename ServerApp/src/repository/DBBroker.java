/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package repository;

import domain.Attendance;
import domain.Child;
import domain.DomainObject;
import domain.Employer;
import domain.OptionalProgram;
import domain.Parent;
import domain.UserProfile;
import domain.UserStatus;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class DBBroker {

    private final Connection connection;

    public DBBroker(Connection connection) {
        this.connection = connection;
    }

    public Connection getConnection() {
        return connection;
    }
    //add,edit,delete,get

    public List<DomainObject> get(DomainObject domainObject) throws Exception {
        try {
            List<DomainObject> domainObjects = new ArrayList<>();
            String query = "SELECT" + domainObject.getSelectValues();
            Statement s = connection.createStatement();
            ResultSet rs = s.executeQuery(query);
            while (rs.next()) {
                domainObjects.add(domainObject.setValuesForGet(rs));
            }
            rs.close();
            s.close();
            System.out.println("Uspesno ucitavanje objekata iz baze!");
            return domainObjects;
        } catch (SQLException ex) {
            System.out.println("Objekat nije uspesno ucitan iz baze!");
            ex.printStackTrace();
            throw ex;
        }
    }

    public void add(DomainObject domainObject) throws SQLException {
        try {
            String query = "INSERT INTO " + domainObject.getTableName() + "(" + domainObject.getColumnsForAdd() + ") VALUES(" + domainObject.getParamsForAdd() + ")";
            PreparedStatement ps = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
            domainObject.setParamsForAdd(ps, domainObject);
            System.out.println("Objekat uspesno dodat u bazu!");
            //da li ima autogenerated key
            if (domainObject.containsAutogeneratedKey()) {
                ResultSet rs = ps.getGeneratedKeys();
                if (rs.next()) {
                    domainObject.setAutogeneratedKey(rs.getLong(1));
                    rs.close();
                }
            }
            ps.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Objekat neuspesno dodat u bazu!");
            throw ex;
        }

    }

  public void delete(DomainObject domainObject) throws SQLException {
        try {
            String query = "DELETE "+domainObject.getDeleteValues();
            PreparedStatement ps = connection.prepareStatement(query);
            domainObject.setValuesForDelete(ps);
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("Objekat uspesno obrisan iz baze!");
            }
            ps.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Objekat neuspesno obrisan iz baze!");
            throw ex;
        }
    }

    public void edit(DomainObject domainObject) throws SQLException {
        try {
            String query = "UPDATE "+ domainObject.getUpdateValues();
            PreparedStatement ps = connection.prepareStatement(query);
            domainObject.setValuesForEdit(ps);
            int result = ps.executeUpdate();
            if (result > 0) {
                System.out.println("Objekat uspesno izmenjen!");
            }
            ps.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Objekat neuspesno izmenjen u bazi!");
            throw ex;
        }

    }

}
