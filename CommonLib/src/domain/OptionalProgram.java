/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package domain;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class OptionalProgram extends DomainObject implements Serializable {

    private Long id;
    private String name;
    private String age;
    private int difficultyLevel;

    public OptionalProgram() {
    }

    public OptionalProgram(Long id, String name, String age, int difficultyLevel) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.difficultyLevel = difficultyLevel;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAge() {
        return age;
    }

    public void setAge(String age) {
        this.age = age;
    }

    public int getDifficultyLevel() {
        return difficultyLevel;
    }

    public void setDifficultyLevel(int difficultyLevel) {
        this.difficultyLevel = difficultyLevel;
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OptionalProgram other = (OptionalProgram) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public String getTableName() {
        return "optional_program";
    }

    @Override
    public String getColumnsForAdd() {
        return "name,age,difficulty_level";
    }

    @Override
    public String getParamsForAdd() {
        return "?,?,?";
    }

    @Override
    public void setParamsForAdd(PreparedStatement ps, DomainObject domainObject) throws SQLException {
        OptionalProgram optionalProgram = (OptionalProgram) domainObject;
        ps.setString(1, optionalProgram.getName());
        ps.setString(2, optionalProgram.getAge());
        ps.setInt(3, optionalProgram.getDifficultyLevel());
        int result = ps.executeUpdate();
    }

    @Override
    public void setAutogeneratedKey(long key) {
        setId(key);
        System.out.println("Vrednost primarnog kljuca je: " + key);
    }

    @Override
    public String getSelectValues() {
        if(name==null){
        return "* FROM optional_program";
        }else{
           return"* FROM optional_program WHERE name=\""+name+"\"";
        }
    }

    @Override
    public DomainObject setValuesForGet(ResultSet rs) {
        OptionalProgram optionalProgram = new OptionalProgram();
        try {
            optionalProgram.setId(rs.getLong("id"));
            optionalProgram.setAge(rs.getString("age"));
            optionalProgram.setDifficultyLevel(rs.getInt("difficulty_level"));
            optionalProgram.setName(rs.getString("name"));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return optionalProgram;

    }

    @Override
    public String getUpdateValues() {
        return "optional_program SET name=?, age=?, difficulty_level=? WHERE id=?";
    }

    @Override
    public void setValuesForEdit(PreparedStatement ps) {
        try {
            ps.setString(1, getName());
            ps.setString(2, getAge());
            ps.setInt(3, getDifficultyLevel());
            ps.setLong(4, getId());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public String getDeleteValues() {
        return "FROM optional_program WHERE id=?";
    }

    @Override
    public void setValuesForDelete(PreparedStatement ps) {
        try {
            ps.setLong(1, getId());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

}
