/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package domain;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class Child extends DomainObject implements Serializable {

    private Long id;
    private String firstname;
    private String lastname;
    private Date birthday;
    private Parent parent;
    private Long jmbg;

    public Child() {
    }

    public Child(Long id, String firstname, String lastname, Date birthday, Parent parent, Long jmbg) {
        this.id = id;
        this.firstname = firstname;
        this.lastname = lastname;
        this.birthday = birthday;
        this.parent = parent;
        this.jmbg = jmbg;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public Parent getParent() {
        return parent;
    }

    public void setParent(Parent parent) {
        this.parent = parent;
    }

    @Override
    public String toString() {
        return firstname + " " + lastname + ", JMBG: " + jmbg;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Child other = (Child) obj;
        return Objects.equals(this.id, other.id);
    }

    public Long getJmbg() {
        return jmbg;
    }

    public void setJmbg(Long jmbg) {
        this.jmbg = jmbg;
    }

    @Override
    public String getTableName() {
        return "child";
    }

    @Override
    public String getColumnsForAdd() {
        return "firstname,lastname,birthday,parent_id,jmbg";
    }

    @Override
    public String getParamsForAdd() {
        return "?,?,?,?,?";
    }

    @Override
    public void setParamsForAdd(PreparedStatement ps, DomainObject domainObject) throws SQLException {
        Child child = (Child) domainObject;
        ps.setString(1, child.getFirstname());
        ps.setString(2, child.getLastname());
        ps.setDate(3, new java.sql.Date(child.getBirthday().getTime()));
        ps.setLong(4, child.getParent().getId());
        ps.setLong(5, child.getJmbg());
        int result = ps.executeUpdate();
    }

    @Override
    public void setAutogeneratedKey(long key) {
        setId(key);
        System.out.println("Vrednost primarnog kljuca je: " + key);
    }

    @Override
    public String getSelectValues() {
        if(jmbg==null){
        return " c.*,p.* FROM child c INNER JOIN parent p ON(c.parent_id=p.id)";
        }else{
            return " c.*,p.* FROM child c INNER JOIN parent p ON(c.parent_id=p.id) WHERE c.jmbg=\""+jmbg+"\"";
        }
    }

    @Override
    public DomainObject setValuesForGet(ResultSet rs) {
        Child child = new Child();
        try {
            Parent parent = new Parent();
            child.setId(rs.getLong("c.id"));
            child.setFirstname(rs.getString("c.firstname"));
            child.setLastname(rs.getString("c.lastname"));
            child.setBirthday(java.sql.Date.valueOf(rs.getDate("c.birthday").toLocalDate()));
            child.setJmbg(rs.getLong("c.jmbg"));
            parent.setId(rs.getLong("p.id"));
            parent.setAdress(rs.getString("p.adress"));
            parent.setFirstname(rs.getString("p.firstname"));
            parent.setLastname(rs.getString("p.lastname"));
            parent.setJmbg(rs.getLong("p.jmbg"));
            parent.setPhoneNumber(rs.getLong("p.phone_number"));
            child.setParent(parent);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return child;
    }

    @Override
    public String getUpdateValues() {
        return "child SET firstname=?, lastname=?, birthday=?, parent_id=?, jmbg=? WHERE id=?";
    }

    @Override
    public void setValuesForEdit(PreparedStatement ps) {
        try {
            ps.setString(1, getFirstname());
            ps.setString(2, getLastname());
            ps.setDate(3, new java.sql.Date(getBirthday().getTime()));
            ps.setLong(4, getParent().getId());
            ps.setLong(5, getJmbg());
            ps.setLong(6, getId());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public String getDeleteValues() {
        return "FROM child WHERE id=?";
    }

    @Override
    public void setValuesForDelete(PreparedStatement ps) {
        try {
            ps.setLong(1, getId());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    

}
