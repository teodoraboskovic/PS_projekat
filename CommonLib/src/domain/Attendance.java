/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package domain;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class Attendance extends DomainObject implements Serializable {

    private OptionalProgram optionalProgram;
    private Child child;
    private Date startDate;
    private Date endDate;
    private Attendance oldAttendance;

    public Attendance() {
    }

    public Attendance(OptionalProgram optionalProgram, Child child, Date startDate, Date endDate) {
        this.optionalProgram = optionalProgram;
        this.child = child;
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public OptionalProgram getOptionalProgram() {
        return optionalProgram;
    }

    public void setOptionalProgram(OptionalProgram optionalProgram) {
        this.optionalProgram = optionalProgram;
    }

    public Child getChild() {
        return child;
    }

    public void setChild(Child child) {
        this.child = child;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    @Override
    public String toString() {
        return child.getFirstname() + " " + child.getLastname() + "(" + optionalProgram.getName() + ")";
    }

    @Override
    public String getTableName() {
        return "attendance";
    }

    @Override
    public String getColumnsForAdd() {
        return "optional_program_id,child_id,start_date";
    }

    @Override
    public String getParamsForAdd() {
        return "?,?,?";
    }

    @Override
    public void setParamsForAdd(PreparedStatement ps, DomainObject domainObject) throws SQLException {
        Attendance attendance = (Attendance) domainObject;
        ps.setLong(1, attendance.getOptionalProgram().getId());
        ps.setLong(2, attendance.getChild().getId());
        ps.setDate(3, new java.sql.Date(attendance.getStartDate().getTime()));
        int result = ps.executeUpdate();
        System.out.println("Vrednost slozenog primarnog kljuca je: " + attendance.getOptionalProgram().getId() + attendance.getChild().getId());
    }

    @Override
    public boolean containsAutogeneratedKey() {
        return false;
    }

    @Override
    public void setAutogeneratedKey(long key) {

    }

    public Attendance getOldAttendance() {
        return oldAttendance;
    }

    public void setOldAttendance(Attendance oldAttendance) {
        this.oldAttendance = oldAttendance;
    }

    @Override
    public String getSelectValues() {
        if (optionalProgram == null) {
            if (child != null && child.getJmbg() != null) {
                return " a.*,c.*,op.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) INNER JOIN optional_program op ON(op.id=a.optional_program_id) WHERE c.jmbg=\"" + child.getJmbg() + "\"";
            }
            return " a.*,c.*,op.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) INNER JOIN optional_program op ON(op.id=a.optional_program_id)";
        } else {
            if (child != null) {
                return " a.*,c.*,op.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) INNER JOIN optional_program op ON(op.id=a.optional_program_id) WHERE c.id=\"" + child.getId() + "\" AND op.id=\"" + optionalProgram.getId() + "\"";
            } else {
                if (startDate!=null && endDate !=null) {
                    return " a.*,c.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) WHERE optional_program_id='" + optionalProgram.getId() + "'";
                }
                if (endDate==null) {
                    return " a.*,c.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) WHERE optional_program_id='" + optionalProgram.getId() + "' AND a.end_date IS NULL";
                }
                if (startDate==null) {
                    return " a.*,c.* FROM attendance a INNER JOIN child c ON(c.id=a.child_id) WHERE optional_program_id='" + optionalProgram.getId() + "' AND a.end_date IS NOT NULL";
                }
                return " "+null;
            }
        }
    }

    @Override
    public DomainObject setValuesForGet(ResultSet rs
    ) {
        Attendance a = new Attendance();
        if (optionalProgram == null) {
            try {
                Child child = new Child();
                OptionalProgram op = new OptionalProgram();
                child.setId(rs.getLong("c.id"));
                child.setFirstname(rs.getString("c.firstname"));
                child.setLastname(rs.getString("c.lastname"));
                child.setBirthday(java.sql.Date.valueOf(rs.getDate("c.birthday").toLocalDate()));
                child.setJmbg(rs.getLong("c.jmbg"));
                op.setId(rs.getLong("op.id"));
                op.setName(rs.getString("op.name"));
                op.setAge(rs.getString("op.age"));
                op.setDifficultyLevel(rs.getInt("op.difficulty_level"));
                a.setStartDate(rs.getDate("a.start_date"));
                a.setEndDate(rs.getDate("a.end_date"));
                a.setChild(child);
                a.setOptionalProgram(op);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                Child child = new Child();
                child.setBirthday(java.sql.Date.valueOf(rs.getDate("c.birthday").toLocalDate()));
                child.setFirstname(rs.getString("c.firstname"));
                child.setId(rs.getLong("c.id"));
                child.setJmbg(rs.getLong("jmbg"));
                child.setLastname(rs.getString("c.lastname"));
                a.setChild(child);
                a.setOptionalProgram(optionalProgram);
                a.setEndDate(rs.getDate("a.end_date"));
                a.setStartDate(rs.getDate("a.start_date"));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return a;
    }

    @Override
    public String getUpdateValues() {
        //ispisi dete
        if (getOldAttendance() == null) {
            return "attendance SET end_date=? WHERE optional_program_id=? AND child_id=?";
        } //menjaj pohadjanje
        else {
            return "attendance SET optional_program_id=?, child_id=?, start_date=?, end_date=? WHERE optional_program_id=? AND child_id=?";
        }
    }

    @Override
    public void setValuesForEdit(PreparedStatement ps
    ) {
        //ispisi dete
        if (getOldAttendance() == null) {
            try {
                LocalDate currentDate = LocalDate.now();
                ps.setDate(1, java.sql.Date.valueOf(currentDate));
                ps.setLong(2, getOptionalProgram().getId());
                ps.setLong(3, getChild().getId());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } //menjaj pohadjanje
        else {
            try {
                ps.setLong(1, getOptionalProgram().getId());
                ps.setLong(2, getChild().getId());
                ps.setDate(3, new java.sql.Date(getStartDate().getTime()));
                if (getEndDate() != null) {
                    ps.setDate(4, new java.sql.Date(getEndDate().getTime()));
                } else {
                    ps.setDate(4, null);
                }
                ps.setLong(5, getOldAttendance().getOptionalProgram().getId());
                ps.setLong(6, getOldAttendance().getChild().getId());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public String getDeleteValues() {
        return "FROM attendance WHERE optional_program_id=? AND child_id=?";
    }

    @Override
    public void setValuesForDelete(PreparedStatement ps
    ) {
        try {
            ps.setLong(1, getOptionalProgram().getId());
            ps.setLong(2, getChild().getId());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

}
