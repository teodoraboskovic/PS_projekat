/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package domain;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class UserProfile extends DomainObject implements Serializable {

    private Long userId;
    private String username;
    private String password;
    private Employer employer;
    private UserStatus userStatus;

    public UserProfile() {
    }

    public UserProfile(Long userId, String username, String password, Employer employer, UserStatus userStatus) {
        this.userId = userId;
        this.username = username;
        this.password = password;
        this.employer = employer;
        this.userStatus = userStatus;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Employer getEmployer() {
        return employer;
    }

    public void setEmployer(Employer employer) {
        this.employer = employer;
    }

    public UserStatus getUserStatus() {
        return userStatus;
    }

    public void setUserStatus(UserStatus userStatus) {
        this.userStatus = userStatus;
    }

    @Override
    public String toString() {
        return username;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final UserProfile other = (UserProfile) obj;
        if (!Objects.equals(this.username, other.username)) {
            return false;
        }
        return Objects.equals(this.password, other.password);
    }

    @Override
    public String getTableName() {
        return null;
    }

    @Override
    public String getColumnsForAdd() {
        return null;
    }

    @Override
    public String getParamsForAdd() {
        return null;
    }

    @Override
    public void setParamsForAdd(PreparedStatement ps, DomainObject domainObject) throws SQLException {

    }

    @Override
    public void setAutogeneratedKey(long key) {

    }

    @Override
    public String getSelectValues() {
        if (password != null) {
            return " u.*, e.* FROM `user` u INNER JOIN employer e ON(u.employer_id=e.id) WHERE u.username=\"" + username + "\" AND u.password=\"" + password + "\" AND UPPER(u.user_status)=\"" + UserStatus.ACTIVE.toString() + "\"";
        } else {
            return " u.*,e.* FROM user u INNER JOIN employer e ON(u.employer_id=e.id)";
        }
    }

    @Override
    public DomainObject setValuesForGet(ResultSet rs) {
        UserProfile userProfile = new UserProfile();
        if (password != null) {
            try {
                Employer employer = new Employer();
                employer.setLastname(rs.getString("e.lastname"));
                employer.setFirstname(rs.getString("e.firstname"));
                employer.setId(rs.getLong("e.id"));
                employer.setAdress(rs.getString("e.adress"));
                employer.setPhoneNumber(rs.getLong("e.phone_number"));
                employer.setSss(rs.getString("e.sss"));
                userProfile.setEmployer(employer);
                userProfile.setPassword(rs.getString("u.password"));
                userProfile.setUsername(rs.getString("u.username"));
                userProfile.setUserId(rs.getLong("u.id"));
                userProfile.setUserStatus(UserStatus.valueOf(rs.getString("u.user_status").toUpperCase()));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else{
             try {
                Employer employer = new Employer();
                employer.setLastname(rs.getString("e.lastname"));
                employer.setFirstname(rs.getString("e.firstname"));
                employer.setId(rs.getLong("e.id"));
                employer.setAdress(rs.getString("e.adress"));
                employer.setPhoneNumber(rs.getLong("e.phone_number"));
                employer.setSss(rs.getString("e.sss"));
                userProfile.setEmployer(employer);
                userProfile.setPassword(null);
                userProfile.setUsername(rs.getString("u.username"));
                userProfile.setUserId(rs.getLong("u.id"));
                userProfile.setUserStatus(UserStatus.valueOf(rs.getString("u.user_status").toUpperCase()));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return userProfile;
    }

    @Override
    public String getUpdateValues() {
        if (password == null) {
            return "user SET user_status=? WHERE id=?";
        } else {
            return "user SET password=? WHERE id=?";
        }
    }

    @Override
    public void setValuesForEdit(PreparedStatement ps) {
        if (password == null) {
            try {
                ps.setString(1, getUserStatus().toString());
                ps.setLong(2, getUserId());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                ps.setString(1, getPassword());
                ps.setLong(2, getUserId());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }

    @Override
    public String getDeleteValues() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setValuesForDelete(PreparedStatement ps) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
