/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.form;

import domain.EditAndDeleteList;
import view.form.util.Mode;
import domain.OptionalProgram;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import view.components.EmployersTableModel;
import view.components.OptionalProgramsTableModel;
import uicontroller.Controller;

/**
 *
 * @author PC
 */
public class ViewAllOptionalProgramForm extends javax.swing.JDialog {

    /**
     * Creates new form ViewAllOptionalProgramForm
     */
    public ViewAllOptionalProgramForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOptionalPrograms = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        btnRegisterChild = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cbViewAll = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Evidencija izbornih programa");

        tblOptionalPrograms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblOptionalPrograms);

        btnEdit.setText("Izmeni");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnRegisterChild.setText("Upisi dete");
        btnRegisterChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterChildActionPerformed(evt);
            }
        });

        btnDelete.setText("Obrisi");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Naziv:");

        btnSearch.setText("Pretrazi");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbViewAll.setText("Prikazi sve");
        cbViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegisterChild)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbViewAll)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(cbViewAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnRegisterChild)
                    .addComponent(btnDetails)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        if (tblOptionalPrograms.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati odredjeni izborni program!", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                OptionalProgramsTableModel optm = (OptionalProgramsTableModel) tblOptionalPrograms.getModel();
                OptionalProgram optionalProgram = optm.getOptionalProgram(tblOptionalPrograms.getSelectedRow());
                List<OptionalProgram> optionalPrograms = Controller.getInstance().getOptionalPrograms(optionalProgram);
                if (!optionalPrograms.isEmpty()) {
                    optionalProgram = optionalPrograms.get(0);
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao izborni program.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new DetailsOptionalProgramForm(null, true, optionalProgram).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnRegisterChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterChildActionPerformed
        if (tblOptionalPrograms.getSelectedRow() >= 0) {
            OptionalProgramsTableModel optm = (OptionalProgramsTableModel) tblOptionalPrograms.getModel();
            OptionalProgram optionalProgram = optm.getOptionalProgram(tblOptionalPrograms.getSelectedRow());
            new AddNewAttendanceForm(null, true, optionalProgram).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati odredjeni izborni program!", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegisterChildActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        txtName.setEnabled(false);
        btnSearch.setEnabled(false);
        cbViewAll.setEnabled(false);
        OptionalProgram optionalProgram;
        int selectedRow = tblOptionalPrograms.getSelectedRow();
        if (tblOptionalPrograms.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati tacno jedan izborni program", "Upozorenje", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                OptionalProgramsTableModel optm = (OptionalProgramsTableModel) tblOptionalPrograms.getModel();
                optionalProgram = optm.getOptionalProgram(selectedRow);
                List<OptionalProgram> optionalPrograms = Controller.getInstance().getOptionalPrograms(optionalProgram);
                if (!optionalPrograms.isEmpty()) {
                    optionalProgram = optionalPrograms.get(0);
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao izborni program.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new AddNewOptionalProgramForm(null, true, optionalProgram, tblOptionalPrograms, Mode.EDIT).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        txtName.setEnabled(false);
        btnSearch.setEnabled(false);
        cbViewAll.setEnabled(false);
        OptionalProgram optionalProgram;
        int selectedRow = tblOptionalPrograms.getSelectedRow();
        if (tblOptionalPrograms.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati tacno jedan izborni program", "Upozorenje", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                OptionalProgramsTableModel optm = (OptionalProgramsTableModel) tblOptionalPrograms.getModel();
                optionalProgram = optm.getOptionalProgram(selectedRow);
                List<OptionalProgram> optionalPrograms = Controller.getInstance().getOptionalPrograms(optionalProgram);
                if (!optionalPrograms.isEmpty()) {
                    optionalProgram = optionalPrograms.get(0);
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao izborni program.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new AddNewOptionalProgramForm(null, true, optionalProgram, tblOptionalPrograms, Mode.DELETE).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita izborni program.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int answer = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da sacuvate sve izmene u bazi? ", "Upozorenje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (answer == JOptionPane.YES_OPTION) {
            OptionalProgramsTableModel optm = (OptionalProgramsTableModel) tblOptionalPrograms.getModel();
            List<OptionalProgram> editedOptionalPrograms = optm.getEditedOptionalPrograms();
            List<OptionalProgram> deletedOptionalPrograms = optm.getDeletedOptionalPrograms();
            try {
                EditAndDeleteList editAndDeleteList = new EditAndDeleteList(editedOptionalPrograms, deletedOptionalPrograms);
                Controller.getInstance().editAndDeleteOptionalPrograms(editAndDeleteList);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio i obrisao izborne programe.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                dispose();
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti ili obrise izborne programe.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                fillTable();
            }

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        cbViewAll.setSelected(false);
//        try {
//            if (validation(txtName.getText().trim())) {
        String name = txtName.getText().trim();
        try {
            OptionalProgram optionalProgram = new OptionalProgram();
            optionalProgram.setName(name);
            List<OptionalProgram> optionalPrograms = Controller.getInstance().getOptionalPrograms(optionalProgram);
            if (!optionalPrograms.isEmpty()) {
                OptionalProgramsTableModel optm = new OptionalProgramsTableModel(optionalPrograms);
                tblOptionalPrograms.setModel(optm);
                JOptionPane.showMessageDialog(this, "Sistem je nasao izborne programe po zadatoj vrednosti.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje izborne programe po zadatoj vrednosti.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Greska pri pretrazivanju izbornog programa u bazi", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        }
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage(), "Upozorenje", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewAllActionPerformed
        fillTable();
    }//GEN-LAST:event_cbViewAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRegisterChild;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox cbViewAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblOptionalPrograms;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        List<OptionalProgram> optionalPrograms = new ArrayList<>();
        try {
            optionalPrograms = Controller.getInstance().getAllOptionalPrograms();
            OptionalProgramsTableModel optb = new OptionalProgramsTableModel(optionalPrograms);
            tblOptionalPrograms.setModel(optb);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska pri ucitavanju liste izbornih programa", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean validation(String name) throws Exception {
        if (name.isEmpty()) {
            throw new Exception("Nevalidan unos, odredjena polja su prazna.");
        }
        if (name.length() > 30) {
            throw new Exception("Nevalidan unos, maksimalan broj karaktera za naziv izbornog programa je 30.");
        }
        return true;
    }
}
