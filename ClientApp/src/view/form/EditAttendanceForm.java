/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.form;

import domain.Attendance;
import domain.Child;
import view.form.util.Mode;
import domain.OptionalProgram;
import domain.Parent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import view.components.AttendancesTableModel;
import view.components.ChildrenTableModel;
import uicontroller.Controller;

/**
 *
 * @author PC
 */
public class EditAttendanceForm extends javax.swing.JDialog {

    private Attendance attendance;
    JTable tblAttendances;
    int mode;

    /**
     * Creates new form EditAttendanceForm
     */
    public EditAttendanceForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         setLocationRelativeTo(null);
    }

    public EditAttendanceForm(java.awt.Frame parent, boolean modal, Attendance attendance, JTable tblAttendances, int mode) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.tblAttendances = tblAttendances;
        this.attendance = attendance;
        this.mode = mode;
         prepareFields();
        fillComboboxChildren();
        fillComboboxOptionalPrograms();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbOptionalPrograms = new javax.swing.JComboBox<>();
        cbChildren = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dpStartDate = new com.toedter.calendar.JDateChooser();
        dpEndDate = new com.toedter.calendar.JDateChooser();
        btnSave = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Dete:");

        jLabel2.setText("Izborni program:");

        cbOptionalPrograms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbChildren.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Datum upisa:");

        jLabel4.setText("Datum ispisa:");

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnQuit.setText("Otkazi");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbChildren, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbOptionalPrograms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dpStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(dpEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnQuit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbChildren, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbOptionalPrograms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(dpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(dpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnQuit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        dispose();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
      if (mode == Mode.EDIT) {
          try {
              if (validation()) {
                  int answer = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da izmenite pohadjanje " + attendance.toString() + "?", "Upozorenje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                  if (answer == JOptionPane.YES_OPTION) {
                      Attendance editedAttendance=new Attendance((OptionalProgram)cbOptionalPrograms.getSelectedItem(), (Child)cbChildren.getSelectedItem(), dpStartDate.getDate(), dpEndDate.getDate());
                      AttendancesTableModel atm = (AttendancesTableModel) tblAttendances.getModel();
                      atm.refreshTable(editedAttendance,attendance);
                      dispose();
                  }
              } 
          } catch (Exception ex) {
              JOptionPane.showMessageDialog(this,ex.getMessage() , "Upozorenje", JOptionPane.ERROR_MESSAGE);
          }
        }
        if(mode==Mode.DELETE){
             int answer = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete pohadjanje " + attendance.toString()+ "?", "Upozorenje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (answer == JOptionPane.YES_OPTION) {
                    AttendancesTableModel atm = (AttendancesTableModel) tblAttendances.getModel();
                    atm.removeFromTable(attendance);
                    dispose();
                }
        }      
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<Object> cbChildren;
    private javax.swing.JComboBox<Object> cbOptionalPrograms;
    private com.toedter.calendar.JDateChooser dpEndDate;
    private com.toedter.calendar.JDateChooser dpStartDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private void prepareFields() {
        dpStartDate.setDate(attendance.getStartDate());
        dpEndDate.setDate(attendance.getEndDate());
        if (mode == Mode.DELETE) {
            dpStartDate.setEnabled(false);
            dpEndDate.setEnabled(false);
            cbChildren.setEnabled(false);
            cbOptionalPrograms.setEnabled(false);
            btnSave.setText("Obrisi");
        }
        if (mode == Mode.EDIT) {
            btnSave.setText("Sacuvaj");
        }
    }

    private void fillComboboxChildren() {
         cbChildren.removeAllItems();
        try {
            List<Child> children = Controller.getInstance().getAllChildren();
            for (Child child : children) {
                cbChildren.addItem(child);
            }
            cbChildren.setSelectedItem(attendance.getChild());

        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Greska pri ucitavanju liste dece");
        }
    }

    private void fillComboboxOptionalPrograms() {
         cbOptionalPrograms.removeAllItems();
        try {
            List<OptionalProgram> optionalPrograms = Controller.getInstance().getAllOptionalPrograms();
            for (OptionalProgram op : optionalPrograms) {
                cbOptionalPrograms.addItem(op);
            }
            cbOptionalPrograms.setSelectedItem(attendance.getOptionalProgram());

        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Greska pri ucitavanju liste izbornih programa");
        }
    }

    private boolean validation() throws Exception {
        if (cbChildren.getSelectedItem()==null || cbOptionalPrograms.getSelectedItem()==null ||   dpStartDate.getDate() == null) {
            throw new Exception("Nevalidan unos, odredjena polja su prazna.");
        }
        return true;
    }
}
