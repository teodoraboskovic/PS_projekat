/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.form;

import domain.Child;
import domain.EditAndDeleteList;
import view.form.util.Mode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import view.components.ChildrenTableModel;
import uicontroller.Controller;

/**
 *
 * @author PC
 */
public class ViewAllChildrenForm extends javax.swing.JDialog {

    /**
     * Creates new form ViewAllChildrenForm
     */
    public ViewAllChildrenForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblChildren = new javax.swing.JTable();
        btnDetails = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtJMBG = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        cbViewAll = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Evidencija dece");

        tblChildren.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblChildren);

        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnEdit.setText("Izmeni");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Obrisi");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("JMBG:");

        btnSearch.setText("Pretrazi");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbViewAll.setText("Prikazi sve");
        cbViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViewAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addGap(7, 7, 7)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbViewAll)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(cbViewAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetails)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        Child child;
        int selectedRow = tblChildren.getSelectedRow();
        if (tblChildren.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati tacno jedno dete", "Upozorenje", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                ChildrenTableModel ctb = (ChildrenTableModel) tblChildren.getModel();
                child = ctb.getChild(selectedRow);
                child = Controller.getInstance().getChild(child);
                if (child != null) {
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao dete.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new DetailsChildrenForm(null, true, child).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        txtJMBG.setEnabled(false);
        btnSearch.setEnabled(false);
        cbViewAll.setEnabled(false);
        Child child;
        if (tblChildren.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati tacno jedno dete", "Upozorenje", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                ChildrenTableModel ctb = (ChildrenTableModel) tblChildren.getModel();
                int selectedRow = tblChildren.getSelectedRow();
                child = ctb.getChild(selectedRow);
                child = Controller.getInstance().getChild(child);
                if (child != null) {
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao dete.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new EditChildForm(null, true, child, tblChildren, Mode.EDIT).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        txtJMBG.setEnabled(false);
        btnSearch.setEnabled(false);
        cbViewAll.setEnabled(false);
        Child child;
        int selectedRow = tblChildren.getSelectedRow();
        if (tblChildren.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati tacno jedno dete.", "Upozorenje", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                ChildrenTableModel ctb = (ChildrenTableModel) tblChildren.getModel();
                child = ctb.getChild(selectedRow);
                child = Controller.getInstance().getChild(child);
                if (child != null) {
                    JOptionPane.showMessageDialog(this, "Sistem je ucitao dete.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                    new EditChildForm(null, true, child, tblChildren, Mode.DELETE).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita dete.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int answer = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da sacuvate sve izmene u bazi? ", "Upozorenje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (answer == JOptionPane.YES_OPTION) {
            ChildrenTableModel ctb = (ChildrenTableModel) tblChildren.getModel();
            List<Child> editedChildren = ctb.getEditedChildren();
            List<Child> deletedChildren = ctb.getDeletedChildren();
            try {
                EditAndDeleteList editAndDeleteList = new EditAndDeleteList(editedChildren, deletedChildren);
                Controller.getInstance().editAndDeleteChildren(editAndDeleteList);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio i obrisao decu.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                dispose();

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti ili obrise decu.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                fillTable();
            }
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        cbViewAll.setSelected(false);
//        try {
//            if (validationJMBG(txtJMBG.getText().trim())) {
        Long jmbg = Long.valueOf(txtJMBG.getText().trim());
        try {
            Child child = new Child();
            child.setJmbg(jmbg);
            child = Controller.getInstance().getChild(child);
            if (child != null) {
                List<Child> children = new ArrayList<>();
                children.add(child);
                ChildrenTableModel ctm = new ChildrenTableModel(children);
                tblChildren.setModel(ctm);
                JOptionPane.showMessageDialog(this, "Sistem je nasao decu po zadatoj vrednosti.", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje decu po zadatoj vrednosti.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Greska pri pretrazivanju deteta u bazi.", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        }
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage(), "Upozorenje", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViewAllActionPerformed
        fillTable();
    }//GEN-LAST:event_cbViewAllActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox cbViewAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblChildren;
    private javax.swing.JTextField txtJMBG;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        List<Child> children = new ArrayList<>();
        try {
            children = Controller.getInstance().getAllChildren();
            ChildrenTableModel ctb = new ChildrenTableModel(children);
            tblChildren.setModel(ctb);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska pri ucitavanju liste dece", "Upozorenje", JOptionPane.ERROR_MESSAGE);
        }

    }

    private boolean validationJMBG(String jmbg) throws Exception {
        if (jmbg.isEmpty()) {
            throw new Exception("Nevalidan unos, odredjena polja su prazna.");
        }
        if (jmbg.length() != 13) {
            throw new Exception("Nevalidan unos, JMBG mora imati tacno 13 cifara.");
        }
        for (int i = 0; i < jmbg.length(); i++) {
            if (!Character.isDigit(jmbg.charAt(i))) {
                throw new Exception("Nevalidan unos, JMBG se moze sastojati iskljucivo od brojeva.");
            }
        }
        return true;
    }
}
